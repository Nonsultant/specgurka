@page "{id:guid}"
@model VizGurka.Pages.Features.Index

@{
  Layout = "~/Pages/Shared/_FeaturesLayout.cshtml";
}

<header>
  <div>
    <img src="~/icons/@(IconHelper.GetStatusIcon(Model.Feature.Status)).svg"
         alt="icon to represent the test result"/>
    <h1>@Model.Feature.Name</h1>
  </div>
  <div class="status-heading">
    <span class="test-result-message">
      @(Model.Feature.Status switch
      {
        Status.Passed => "Passed",
        Status.Failed => "Failed",
        Status.NotImplemented => "Not implemented",
        _ => "There was an error reading the status of the feature"
      })
    </span>
    <div class="test-time">
      @{
        var duration = TimeSpan.Parse(Model.Feature.TestDuration);
      }
      @if (duration.TotalSeconds > 0)
      {
        <img src="~/icons/clock.svg" alt="" title="This is very important because it can be bad."/>
        <span class="test-result-message">
          @DurationHelper.FormatDuration(Model.Feature.TestDuration)
        </span>
      }
    </div>
  </div>
</header>
<div class="feature-wrapper">
  @if (Model.Feature.Description is not null)
  {
    <section class="main-description">
      @Model.MarkdownStringToHtml(Model.Feature.Description)
    </section>
  }
  @if (Model.Feature.Background is not null)
  {
    <section class="scenario background">
      <div class="scenario-overview">
        <div class="scenario-heading">
          <img src="~/icons/@(IconHelper.GetStatusIcon(Model.Feature.Background.Status)).svg"
               alt="icon to represent the test result"/>
          @if (!string.IsNullOrEmpty(Model.Feature.Background.Name))
          {
            <h2>@Model.Feature.Background.Name</h2>
          }
          else
          {
            <h2>Background</h2>
          }
        </div>
        <img
          src="~/icons/question-mark.svg"
          alt="question mark tooltip"
          title="The background are steps that run before every scenario under it, this because we dont want to repeat ourselves in every scenario. The background might not have a name.">
      </div>
      <hr/>
      @if (!string.IsNullOrEmpty(Model.Feature.Background.Description))
      {
        <div class="description">
          @Model.MarkdownStringToHtml(Model.Feature.Background.Description)
        </div>
      }
      <ul class="step-list">
        @foreach (var step in Model.Feature.Background.Steps)
        {
          <li class="@(step.Status == Status.Failed ? "test-not-passed" : "")">
            <strong>@step.Kind</strong> @step.Text
          </li>
          @if (step.Status == Status.Failed && !string.IsNullOrEmpty(step.TestErrorMessage))
          {
            <input type="checkbox" id="toggle-error-@step.GetHashCode()" class="toggle-error" hidden/>
            <label for="toggle-error-@step.GetHashCode()" class="view-error">View error message</label>
            <div class="error-message">
              <p>@step.TestErrorMessage</p>
            </div>
          }

          if (!string.IsNullOrEmpty(step.Table))
          {
            @Model.MarkdownStringToHtml(step.Table)
          }
        }
      </ul>
    </section>
  }
  @foreach (var scenario in Model.Feature.Scenarios)
  {
    <section class="scenario @IconHelper.GetStatusIcon(scenario.Status)" id="@scenario.Name">
      <div class="scenario-overview">
        <div class="scenario-heading">
          <img src="~/icons/@(IconHelper.GetStatusIcon(scenario.Status)).svg"
               alt="icon to represent the test result"/>
          <h3>@scenario.Name</h3>
        </div>
        <div class="test-time">
          @if (scenario.Status == Status.NotImplemented)
          {
            <span>Not implemented</span>
          }
          else{
            <img src="~/icons/clock.svg" alt="icon of a clock"/>
            <span>@(DurationHelper.FormatDuration(scenario.TestDuration))</span>
          }
          @if (!string.IsNullOrEmpty(scenario.Examples))
          {
            <img
              src="~/icons/rerun.svg"
              alt="icon to illustrate how many times the scenario was run.">
            <span>@(scenario.Examples?.Split('\n').Length - 3 ?? 0)</span>
            <img
              src="~/icons/question-mark.svg"
              alt="question mark tooltip"
              title="This is a scenario outline, it runs each time for every row in the table after the steps. The values of the tables are inserted into the <> during testing.">
          }
        </div>
      </div>
      <hr class="divider" />
      @if (!string.IsNullOrEmpty(scenario.Description))
      {
        <div class="description">
          @Model.MarkdownStringToHtml(scenario.Description)
        </div>
      }
      <ul class="step-list">
        @foreach (var step in scenario.Steps)
        {
          <li class="@(step.Status == Status.Failed ? "test-not-passed" : "")">
            <strong>@step.Kind</strong> @step.Text
          </li>
          @if (step.Status == Status.Failed && !string.IsNullOrEmpty(step.TestErrorMessage))
          {
            <input type="checkbox" id="toggle-error-@step.GetHashCode()" class="toggle-error" hidden />
            <label for="toggle-error-@step.GetHashCode()" class="view-error">View error message</label>
            <div class="error-message">
              <p>@step.TestErrorMessage</p>
            </div>
          }
          if (!string.IsNullOrEmpty(step.Table))
          {
            @Model.MarkdownStringToHtml(step.Table)
          }
        }
      </ul>
      @if (!string.IsNullOrEmpty(scenario.Examples))
      {
        @Model.MarkdownStringToHtml(scenario.Examples)
      }
    </section>
  }
  @foreach (var rule in Model.Feature.Rules)
  {
    <section class="rule">
      <div class="scenario-overview">
        <h2>@rule.Name</h2>
        <img
          src="~/icons/question-mark.svg"
          alt="question mark tooltip"
          title="This is a rule, its purpose is to represent one business rule and group together multiple scenarios, but it has no functional purpose.">
      </div>
      <hr/>
      @if (!string.IsNullOrEmpty(rule.Description))
      {
        <div class="description">
          @Model.MarkdownStringToHtml(rule.Description)
        </div>
      }
      @if (rule.Background is not null)
      {
        <section class="scenario background">
          <div class="scenario-overview">
            <div class="scenario-heading">
              <img src="~/icons/@(IconHelper.GetStatusIcon(rule.Background.Status)).svg"
                   alt="icon to represent the test result"/>
              @if (!string.IsNullOrEmpty(rule.Background.Name))
              {
                <h3>@rule.Background.Name</h3>
              }
              else
              {
                <h3>Background</h3>
              }
            </div>
            <img
              src="~/icons/question-mark.svg"
              alt="question mark tooltip"
              title="The background are steps that run before every scenario under it, this because we dont want to repeat ourselves in every scenario. This background is inside a rule, which means that the steps only apply before every scenario in this rule. The background might not have a name.">
          </div>
          <hr class="divider"/>
          @if (!string.IsNullOrEmpty(rule.Background.Description))
          {
            <div class="description">
              @Model.MarkdownStringToHtml(rule.Background.Description)
            </div>
          }
          <ul class="step-list">
            @foreach (var step in rule.Background.Steps)
            {
              <li class="@(step.Status == Status.Failed ? "test-not-passed" : "")">
                <strong>@step.Kind</strong> @step.Text
              </li>
              @if (step.Status == Status.Failed && !string.IsNullOrEmpty(step.TestErrorMessage))
              {
                <input type="checkbox" id="toggle-error-@step.GetHashCode()" class="toggle-error" hidden/>
                <label for="toggle-error-@step.GetHashCode()" class="view-error">View error message</label>
                <div class="error-message">
                  <p>@step.TestErrorMessage</p>
                </div>
              }

              if (!string.IsNullOrEmpty(step.Table))
              {
                @Model.MarkdownStringToHtml(step.Table)
              }
            }
          </ul>
        </section>
      }
      @foreach (var scenario in rule.Scenarios)
      {
        <section class="scenario @(IconHelper.GetStatusIcon(scenario.Status))" id="@scenario.Name">
          <div class="scenario-overview">
            <div class="scenario-heading">
              <img src="~/icons/@(IconHelper.GetStatusIcon(scenario.Status)).svg"
                   alt="icon to represent the test result"/>
              <h3>@scenario.Name</h3>
            </div>
            <div class="test-time">
              @if (scenario.Status == Status.NotImplemented)
              {
                <span>Not implemented</span>
              }
              else
              {
                <img src="~/icons/clock.svg" alt="icon of a clock"/>
                <span>@(DurationHelper.FormatDuration(scenario.TestDuration))</span>
              }
              @if (!string.IsNullOrEmpty(scenario.Examples))
              {
                <img
                  src="~/icons/rerun.svg"
                  alt="icon to illustrate how many times the scenario was run.">
                <span>@(scenario.Examples?.Split('\n').Length - 3 ?? 0)</span>
                <img
                  src="~/icons/question-mark.svg"
                  alt="question mark tooltip"
                  title="This is a scenario outline, it runs each time for every row in the table after the steps. The values of the tables are inserted into the <> during testing.">
              }
            </div>
          </div>
          <hr class="divider"/>
          @if (!string.IsNullOrEmpty(scenario.Description))
          {
            <div class="description">
              @Model.MarkdownStringToHtml(scenario.Description)
            </div>
          }
          <ul class="step-list">
            @foreach (var step in scenario.Steps)
            {
              <li class="@(step.Status == Status.Failed ? "test-not-passed" : "")">
                <strong>@step.Kind</strong> @step.Text
              </li>
              @if (step.Status == Status.Failed && !string.IsNullOrEmpty(step.TestErrorMessage))
              {
                <input type="checkbox" id="toggle-error-@step.GetHashCode()" class="toggle-error" hidden/>
                <label for="toggle-error-@step.GetHashCode()" class="view-error">View error message</label>
                <div class="error-message">
                  <p>@step.TestErrorMessage</p>
                </div>
              }

              if (!string.IsNullOrEmpty(step.Table))
              {
                @Model.MarkdownStringToHtml(step.Table)
              }
            }
          </ul>
          @if (!string.IsNullOrEmpty(scenario.Examples))
          {
            @Model.MarkdownStringToHtml(scenario.Examples)
          }
        </section>
      }
    </section>
  }
</div>